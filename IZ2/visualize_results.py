import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

sns.set(style="whitegrid")
plt.rcParams.update({'figure.max_open_warning': 0})

EDGE_DETECTION_RESULTS = 'IZ2/edge_detection_results.csv'
OPTIMAL_RESULTS = 'IZ2/optimal_edge_detection_results.csv'
BEST_METHOD_FILE = 'IZ2/best_method_overall.txt'
VISUALIZATION_FOLDER = 'IZ2/visualizations/'

os.makedirs(VISUALIZATION_FOLDER, exist_ok=True)


def read_data():
    """
    –ß—Ç–µ–Ω–∏–µ CSV –∏ TXT —Ñ–∞–π–ª–æ–≤.
    """
    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df_all = pd.read_csv(EDGE_DETECTION_RESULTS)
    print(f"‚úÖ –°—á–∏—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ '{EDGE_DETECTION_RESULTS}'.")

    # –ß—Ç–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df_optimal = pd.read_csv(OPTIMAL_RESULTS)
    print(f"‚úÖ –°—á–∏—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ '{OPTIMAL_RESULTS}'.")

    # –ß—Ç–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞
    with open(BEST_METHOD_FILE, 'r', encoding='utf-8') as f:
        best_method = f.read().strip()
    print(f"‚úÖ –°—á–∏—Ç–∞–Ω –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –∏–∑ '{BEST_METHOD_FILE}': {best_method}")

    return df_all, df_optimal, best_method


def visualize_num_edges_per_method(df_all):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –ø–æ –º–µ—Ç–æ–¥–∞–º.
    """
    plt.figure(figsize=(12, 8))
    sns.boxplot(x='Method', y='Num Edges', data=df_all)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –ø–æ –º–µ—Ç–æ–¥–∞–º')
    plt.xlabel('–ú–µ—Ç–æ–¥')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü')
    plt.xticks(rotation=45)
    plt.tight_layout()
    save_path = os.path.join(VISUALIZATION_FOLDER, 'num_edges_per_method.png')
    plt.savefig(save_path)
    plt.show()
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ –º–µ—Ç–æ–¥–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")


def visualize_optimal_methods(df_optimal):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    """
    plt.figure(figsize=(10, 6))
    sns.countplot(x='Method', data=df_optimal)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º')
    plt.xlabel('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    plt.xticks(rotation=45)
    plt.tight_layout()
    save_path = os.path.join(VISUALIZATION_FOLDER, 'optimal_methods_distribution.png')
    plt.savefig(save_path)
    plt.show()
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")


def visualize_best_method_overall(best_method):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    """
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    clean_best_method = best_method.replace('üèÜ ', '') if 'üèÜ ' in best_method else best_method

    plt.figure(figsize=(6, 6))
    plt.text(0.5, 0.5, clean_best_method, fontsize=20, ha='center', va='center')
    plt.title('–õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º')
    plt.axis('off')

    save_path = os.path.join(VISUALIZATION_FOLDER, 'best_method_overall.png')
    plt.savefig(save_path)
    plt.show()
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")


def visualize_num_edges_per_image(df_all):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤.
    """
    plt.figure(figsize=(14, 10))
    sns.scatterplot(data=df_all, x='Image', y='Num Edges', hue='Method', alpha=0.7, palette='tab10')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤')
    plt.xlabel('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü')
    plt.xticks(rotation=45)
    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    plt.tight_layout()
    save_path = os.path.join(VISUALIZATION_FOLDER, 'num_edges_per_image.png')
    plt.savefig(save_path)
    plt.show()
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")


def visualize_best_parameters(df_all, df_optimal):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–∏–≤–µ–¥—à–∏—Ö –∫ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥—Ä–∞–Ω–∏—Ü.
    """
    df_best_params = pd.merge(df_all, df_optimal, on='Image', suffixes=('', '_Optimal'))
    df_best_params = df_best_params[df_best_params['Method'] == df_best_params['Method_Optimal']]

    df_canny = df_best_params[df_best_params['Method'] == 'Canny']
    if not df_canny.empty:
        plt.figure(figsize=(10, 6))
        sns.countplot(x='Gaussian Kernel', data=df_canny, palette='pastel')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —è–¥—Ä–∞ –ì–∞—É—Å—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Canny')
        plt.xlabel('–†–∞–∑–º–µ—Ä —è–¥—Ä–∞ –ì–∞—É—Å—Å–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
        plt.xticks(rotation=45)
        plt.tight_layout()
        save_path = os.path.join(VISUALIZATION_FOLDER, 'optimal_gaussian_kernel_canny.png')
        plt.savefig(save_path)
        plt.show()
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —è–¥—Ä–∞ –ì–∞—É—Å—Å–∞ –¥–ª—è Canny —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞ Canny
        plt.figure(figsize=(12, 8))
        sns.scatterplot(data=df_canny,
                        x='Lower Threshold', y='Upper Threshold', hue='Gaussian Kernel', palette='viridis', s=100)
        plt.title('–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Canny')
        plt.xlabel('–ù–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥')
        plt.ylabel('–í–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥')
        plt.legend(title='–†–∞–∑–º–µ—Ä —è–¥—Ä–∞ –ì–∞—É—Å—Å–∞')
        plt.tight_layout()
        save_path = os.path.join(VISUALIZATION_FOLDER, 'optimal_canny_thresholds.png')
        plt.savefig(save_path)
        plt.show()
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è Canny —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{save_path}'.")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–µ—Ç–æ–¥–∞ Canny –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")


def main():
    df_all, df_optimal, best_method = read_data()

    visualize_num_edges_per_method(df_all)

    visualize_optimal_methods(df_optimal)

    visualize_best_method_overall(best_method)

    visualize_num_edges_per_image(df_all)

    visualize_best_parameters(df_all, df_optimal)


if __name__ == "__main__":
    main()
